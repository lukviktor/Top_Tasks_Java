import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.Scanner;

public class Top20Tasks {
    public static void stringBuilderAppendReverse(String st) {
        /**
         * Напишите программу на Java для переворачивания строки, изменив расположение символов в строке
         * задом наперёд без использования встроенных в String функций.
         * Для начала инициализируем строковую переменную st и используем класс StringBuilder.
         * Объект класса StringBuilder strB будет в дальнейшем использоваться для добавления значения,
         * хранящегося в строковой переменной st.
         * После этого мы используем встроенную в StringBuilder функцию reverse() и сохраняем новую - обращенную строку в stB.
         * Наконец, мы выводим на экран stB.
         */
        StringBuilder stB = new StringBuilder();
        stB.append(st).reverse(); // Метод append() – обновляет значение объекта
        // и используем StringBuilder reverse() для переворота строки
        System.out.println(stB);
    }

    public static void flipOverCycleForMethod1(String st) {
        /**
         * Напишите программу на Java для переворота последовательности символов в строке
         * без использования встроенной в String функции reverse().
         * Способ 1:
         * Есть несколько способов, с помощью которых вы можете перевернуть вашу строку,
         * если вам разрешено использовать другие встроенные функции строки.
         * В этом способе мы инициализируем строковую переменную с именем st значением заданной строки.
         * Затем мы конвертируем эту строку в массив символов с помощью функции toCharArray().
         * После этого мы используем цикл for чтобы взять все символы в обратном порядке и вывести их так на экран поочередно.
         */
        char[] symbols = st.toCharArray();  // конвертируем строку в массив символов, затем выводим символы на экран в обратном порядке
        for (int i = symbols.length - 1; i >= 0; i--) {
            System.out.print(symbols[i]);
        }
    }

    public static void flipOverCycleForMethod2() {
        /**
         * Напишите программу на Java для переворота последовательности символов в строке
         * без использования встроенной в String функции reverse().
         * Способ 2:
         * Это еще один способ выполнить задачу с переворотом последовательности символов в строке.
         * В этом способе вы объявляете строковую переменную st, а затем используете класс Scanner,
         * объявляя объект scannerQ для работы со стандартным потоком ввода данных.
         * В данном случае программа примет строковое значение через командную строку (при ее выполнении).
         * Далее мы использовали метод nextLine(), который прочитал нашу строку при вводе ее через консоль с пробелами
         * между словами строки. После этого мы использовали метод split() для разделения строки на ее подстроки
         * (здесь не указывается разделитель). Затем, мы выводим строку в обратном порядке, используя цикл for.
         */
        String st;
        Scanner scannerQ = new Scanner(System.in);
        System.out.println("Введите вашу строку:");
        st = scannerQ.nextLine();
        String[] temp = st.split("");    //используем метод split для вывода строки в обратном порядке
        for (int x = temp.length - 1; x >= 0; x--) {
            System.out.print(temp[x] + "");
        }
    }

    public static void flipOverCycleForMethod3() {
        /**
         * Способ 3:
         * Это способ почти такой же, как способ 2, но здесь мы не используем метод split().
         * Мы используем класс Scanner и метод nextLine() для чтения входящей строки.
         * Затем мы объявили целочисленную переменную stringLength, присваивая ей значение длины входящей строки.
         * После этого мы вывели строку в обратном порядке, используя цикл for.
         * Однако мы использовали метод charAt(index), который будет возвращать символ по конкретному индексу.
         * После каждой итерации символ будет добавлен в новую строку для получения перевернутого значения строковой переменной.
         * Затем, мы выводим переменную перевернутой строки.
         */
        String mainString, reverseString = "";
        System.out.println("Введите нужную строку, чтобы получить перевернутую:");
        Scanner scannerQ = new Scanner(System.in);
        mainString = scannerQ.nextLine();
        int stringLength = mainString.length();
        for (int x = stringLength - 1; x >= 0; x--) {
            reverseString = reverseString + mainString.charAt(x);   //используем встроенный метод charAt() чтобы перевернуть строку
        }
        System.out.println(reverseString);
    }

    public static void reverse2VariablesWith3() {
        /**
         * Напишите программу на Java для того, чтобы поменять местами значения,
         * хранящиеся в двух переменных с помощью третьей переменной
         * Ответ:
         * В этом примере мы создаем объект класса Scanner для работы со стандартным потоком ввода данных System.in.
         * Эта программа будет принимать значения a и b через командную строку.
         * Мы использовали nextInt(), который будет помещать введенные пользователем значения целочисленнох переменных в a и b.
         * Также объявляем временную переменную.
         * Теперь логика программы выглядит следующим образом: мы создаем временную или третью переменную с именем temp,
         * присваиваем ей значение, хранящееся в переменной a, а затем мы присваиваем a значение b, и снова присваиваем b
         * значение temp. Таким образом, после выполнения всех операций temp будет хранить в себе значение a,
         * a получит значение b, а b будет иметь значение temp (которое равно a).
         */

        int a, b, temp;
        System.out.println("Введите значения a и b");
        Scanner scannerQ = new Scanner(System.in);
        a = scannerQ.nextInt();
        b = scannerQ.nextInt();
        System.out.println("До обмена значениями " + a + b);
        temp = a;
        a = b;
        b = temp;
        System.out.println("После обмена значениями " + a + b);
    }

    public static void reverse2VariablesWithoutUsing3() {
        /**
         * Напишите программу на Java, чтобы поменять местами значения, хранящиеся в двух переменных,
         * без использования третьей переменной.
         * Ответ:
         * В начале все будет так же, как и в приведенном выше примере. Только дальнейшая логика изменится.
         * Здесь мы сначала присваиваем переменной a значение a + b, что означает,
         * что a будет теперь иметь в себе значение как a, так и b.
         * Затем мы присваиваем переменной b значение a - b,
         * что означает, что мы вычитаем значение b из суммы (a + b).
         * До сих пор a все еще хранит в себе сумму изначальных a и b. Но b имеет теперь значение первоначального a.
         * Наконец, на третьем шаге мы присваиваем a значение a - b, что означает,
         * что мы вычитаем значение переменной b (которая сейчас уже имеет в себе значение a) из суммы (a + b).
         * В результате этих действий мы поменяли местами значения, хранящиеся в переменных.
         */
        int a, b;
        System.out.println("Введите нужные значения a и b");
        Scanner scannerQ = new Scanner(System.in);
        a = scannerQ.nextInt();
        b = scannerQ.nextInt();
        System.out.println("До обмена значениями\na = " + a + "\nb = " + b);
        a = a + b;
        b = a - b;
        a = a - b;
        System.out.println("После обмена значениями без промежуточной переменной\na = " + a + "\nb = " + b);
    }

    public static void countingWordsInStringUsingHashmap() {
        /**
         * Напишите программу на Java для подсчета количества конкретных слов в строке, используя HashMap.
         * Ответ:
         * Это программа работает с классом-коллекцией, в которой мы использовали HashMap для хранения строки.
         * Прежде всего, мы объявили нашу строковую переменную с именем st. Затем мы использовали функцию split(),
         * с одиночным пробелом, чтобы можно было разбить строку на массив из нескольких слов.
         * После этого мы создали экземпляр HashMap и цикл for. Внутри цикла for мы используем оператор if else.
         * Мы заходим в каждый элемент массива split и добавляем элементы этого массива.
         * Слова мы добавляем в качестве ключей экземпляра HashMap.
         * В качестве значений HashMap  мы будем добавлять то число, сколько раз при обходе массива слов
         * нам данное слово встретилось.
         * Если в наш экземпляр HashMap мы уже добавили данное слово – при обходе мы увеличим значение, записанное в HashMap
         * в соответствии с данным словом-ключом.
         * Каждый раз, когда слово будет встречаться повторно (мы видим, что слово в экземпляр HashMap мы уже добавляли)
         * – значение-счетчик увеличивается на 1. Если такое слово ранее не встречалось – значение-счетчик устанавливается на 1.
         * Наконец, мы выводим на экран HashMap.
         * Обратите внимание: ту же программу вы можете использовать и для подсчета количества символов в строке.
         * Все, что вам нужно сделать, это удалить один пробел (удалить пробел, указанный в методе split)
         * и прописать String [] words = st.split (“”);
         */
        String st = "Current task posted for Java developers developers";
        String[] words = st.split(" ");
        HashMap<String, Integer> keyValue = new HashMap<String, Integer>();
        for (int i = 0; i <= words.length - 1; i++) {
            if (keyValue.containsKey(words[i])) {
                int counter = keyValue.get(words[i]);
                keyValue.put(words[i], counter + 1);
            } else {
                keyValue.put(words[i], 1);
            }
        }
        System.out.println(keyValue);
    }

    /**
     * Напишите Java-программу для итерации объекта типа HashMap с использованием цикла while и улучшенного цикла for.
     * Ответ:
     * Здесь мы для начала вставили три элемента в переменную типа HashMap с именем keyValue, используя функцию put().
     * Размер переменной keyValue можно получить с помощью метода size().
     * После этого мы использовали цикл While для обхода keyValue,
     * которая содержит по одной паре ключ-значение для каждого элемента.
     * Ключи и значения могут быть получены с помощью методов getKey() и getValue().
     * Аналогично, мы используем расширенный цикл for, на элементах «qurentMe2» в HashMap.
     */

    public static void iterationHashMapObjectUsingCycleWhileImprovedFor() {
        /**
         *Напишите Java-программу для итерации объекта типа HashMap с использованием цикла while и улучшенного цикла for.
         * Ответ:
         * Здесь мы для начала вставили три элемента в переменную типа HashMap с именем keyValue, используя функцию put().
         * Размер переменной keyValue можно получить с помощью метода size().
         * После этого мы использовали цикл While для обхода keyValue,
         * которая содержит по одной паре ключ-значение для каждого элемента.
         * Ключи и значения могут быть получены с помощью методов getKey() и getValue().
         * Аналогично, мы используем расширенный цикл for, на элементах «qurentMe2» в HashMap.
         */
        HashMap<Integer, String> keyValue = new HashMap<Integer, String>();
        keyValue.put(1, "Hello");
        keyValue.put(2, "World");
        keyValue.put(3, "Have a nice day!");
        System.out.println(keyValue.size());
        System.out.println("Цикл While:");
        Iterator iter = keyValue.entrySet().iterator();
        while (iter.hasNext()) {
            Map.Entry qurentMe = (Map.Entry) iter.next();
            System.out.println("Ключ это " + qurentMe.getKey() + " Значение это " + qurentMe.getValue());
        }
        System.out.println("Цикл For:");
        for (Map.Entry qurentMe2 : keyValue.entrySet()) {
            System.out.println("Ключ это: " + qurentMe2.getKey() + " Значение это: " + qurentMe2.getValue());
        }
    }

    public static void numberPrimeOrNot() {
        /**
         * Q # 7) Напишите программу на Java, чтобы узнать, является ли число простым или нет.
         * Ответ:
         * Мы объявили две целочисленных переменных temp и number и использовали класс Scanner с nextInt
         * (поскольку у нас может быть на рассмотрении только целое число).
         * Объявляем логическую переменную numberIsPrime и устанавливаем ее значение - true.
         * После этого мы используем цикл for со значением переменной итератора, начинающемся с 2.
         * Количество итераций, нужное нам, будет равно половине введенного числа.
         * Счетчик итераций увеличивается на 1 после каждой итерации.
         * В переменную tempNumber мы будем помещать остаток от деления значения введенного числа на значение счетчика.
         * Если остаток от деления в одной из итераций будет равен 0, тогда numberIsPrime будет установлен в false,
         * введенное число не будет простым, и мы выходим из цикла.
         * Если во всех итерациях мы будем получать в temp некие остатки от деления, отличные от нуля – число будет простым.
         * Основываясь на значении numberIsPrime, мы приходим к выводу, является ли наше число простым или нет.
         */
        int temp, number;
        boolean numberIsPrime = true;
        Scanner scannerQ = new Scanner(System.in);
        number = scannerQ.nextInt();
        scannerQ.close();
        for (int x = 2; x <= number / 2; x++) {
            temp = number % x;
            if (temp == 0) {
                numberIsPrime = false;
                break;
            }
        }
        if (numberIsPrime)
            System.out.println(number + " число является простым");
        else
            System.out.println(number + " число не является простым");
    }
}
